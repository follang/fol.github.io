<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Routines on FOL</title>
    <link>https://follang.org/docs/500_items/routines/</link>
    <description>Recent content in Routines on FOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, FOL</copyright>
    
        <atom:link href="https://follang.org/docs/500_items/routines/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Procedures</title>
        <link>https://follang.org/docs/500_items/routines/procedures/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://follang.org/docs/500_items/routines/procedures/</guid>
        <description>Procedures are most common type of routines in Fol. When a procedure is &amp;ldquo;called&amp;rdquo; the program &amp;ldquo;leaves&amp;rdquo; the current section of code and begins to execute the first line inside the procedure. Thus the procedure &amp;ldquo;flow of control&amp;rdquo; is:
 The program comes to a line of code containing a &amp;ldquo;procedure call&amp;rdquo;. The program enters the procedure (starts at the first line in the procedure code). All instructions inside of the procedure are executed from top to bottom.</description>
      </item>
      
      <item>
        <title>Functions</title>
        <link>https://follang.org/docs/500_items/routines/functions/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://follang.org/docs/500_items/routines/functions/</guid>
        <description>Functions compared to procedure are pure. A pure function is a function that has the following properties:
 Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I/O devices). Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I/O streams).  Thus a pure function is a computational analogue of a mathematical function.</description>
      </item>
      
      <item>
        <title>Methods</title>
        <link>https://follang.org/docs/500_items/routines/methods/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://follang.org/docs/500_items/routines/methods/</guid>
        <description>There is another type of routine, called method, but it can be either a pure function either a procedure. A method is a piece of code that is called by a name that is associated with an object where it is implicitly passed the object on which it was called and is able to operate on data that is contained within the object.
They either are defined inside the object, or outside the object then the object in which they operate is passed like so (just like in Golang):</description>
      </item>
      
      <item>
        <title>Logicals</title>
        <link>https://follang.org/docs/500_items/routines/logicals/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://follang.org/docs/500_items/routines/logicals/</guid>
        <description>var likes: axi[str, str] = { &amp;quot;bob&amp;quot;:&amp;quot;alice&amp;quot;, &amp;quot;dan&amp;quot;:&amp;quot;sally&amp;quot; } log dating(a, b: str): bol = { likes[a:b] and likes[b:a] } log frends(a, b): bol = { likes[a:b] or likes[b:a] } var parent: axi[str, str] = { &amp;quot;albert&amp;quot;:&amp;quot;bob&amp;quot;, &amp;quot;albert&amp;quot;:&amp;quot;betty&amp;quot;, &amp;quot;albert&amp;quot;:&amp;quot;bill&amp;quot;, &amp;quot;alice&amp;quot;:&amp;quot;bob&amp;quot;, &amp;quot;alice&amp;quot;:&amp;quot;betty&amp;quot;, &amp;quot;alice&amp;quot;:&amp;quot;bill&amp;quot;, &amp;quot;bob&amp;quot;:&amp;quot;carl&amp;quot;, &amp;quot;bob&amp;quot;:&amp;quot;tom&amp;quot; } var dances axi[str] = { &amp;quot;albert&amp;quot;, &amp;quot;betty&amp;quot;, &amp;quot;carl&amp;quot; } log a_parent_that_dances(a: str): bol = { parent[a:_] and dances[a] } log all_parents_that_dance(): vec[str] = { parent[_:X] and dances[X] } log has_grandparents(a: str): vec[str] = { parent[X:a] and parent[Y:X] } log are_syblings(a, b: str): vec[str] = { parent[X:a] and parent[X:b] } var brothers: axi[str] = { &amp;quot;bob&amp;quot;::&amp;quot;bill&amp;quot; }; log has_uncle(a: str): vec[str] = { parent[Y:a] and brothers[Y:Z] } If A is object and objects can be destroyed, then A can be destroyed.</description>
      </item>
      
    
  </channel>
</rss>